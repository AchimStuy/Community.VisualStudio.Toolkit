# -----------------------------------------------------------------------------
#
# This script is used to generate the KnownCommands.cs file which contains the 
# CommandIDs for all commands that are defined in the VSConstants (for example,
# `VSStd97CmdID`, `VSStd2KCmdID`, and so on).
# 
# This script needs access to the DTE object. The Package Manager Console
# exposes the DTE object via the `$dte` variable, so use the Package Manager 
# Console to run this script.
#
# PM> .\src\GenerateKnownCommands.ps1
#
# -----------------------------------------------------------------------------

$ErrorActionPreference = "Stop"
Set-StrictMode -Version 3.0

if (-not (Get-Variable dte -ErrorAction SilentlyContinue)) {
    Write-Error "This script must be run in the Package Manager Console in Visual Studio."
    return
}

$MINIMUM_VERSION = 14
$MAXIMUM_VERSION = 17

$COMMAND_SETS = @(
    @{Name = "VSStd97CmdID"; Guid = "StandardCommandSet97_guid"; Introduced = $MINIMUM_VERSION }
    @{Name = "VSStd2KCmdID"; Guid = "StandardCommandSet2K_guid"; Introduced = $MINIMUM_VERSION }
    @{Name = "VSStd2010CmdID"; Guid = "StandardCommandSet2010_guid"; Introduced = $MINIMUM_VERSION }
    @{Name = "VSStd11CmdID"; Guid = "StandardCommandSet11_guid"; Introduced = $MINIMUM_VERSION }
    @{Name = "VSStd12CmdID"; Guid = "StandardCommandSet12_guid"; Introduced = $MINIMUM_VERSION }
    @{Name = "VSStd14CmdID"; Guid = "StandardCommandSet14_guid"; Introduced = $MINIMUM_VERSION }
    @{Name = "VSStd15CmdID"; Guid = "StandardCommandSet15_guid"; Introduced = 15 }
    @{Name = "VSStd16CmdID"; Guid = "StandardCommandSet16_guid"; Introduced = 16 }
)

function Write-Commands {
    param (
        [System.IO.StreamWriter] $Writer,
        [array] $Commands,
        [int] $Version
    )

    $closeIfDef = $false
    $first = $true

    foreach ($command in ($Commands | Sort-Object { $_.Name })) {
        if ($command.MinimumVersion -eq $Version) {
            if ($first) {
                # For versions greater than the minimum, 
                # we need to wrap the properties in a `#if`.
                if ($Version -gt $MINIMUM_VERSION) {
                    # A command is availabe in its minimum version and all higher versions.
                    $writer.WriteLine("#if $((@($Version..$MAXIMUM_VERSION) | ForEach-Object { "VS$_" }) -join " || ")")
                    $closeIfDef = $true
                }
            } else {
                $writer.WriteLine()
            }

            $command.Code | ForEach-Object { $writer.WriteLine($_) }
            $first = $false
        }
    }

    if ($closeIfDef) {
        $writer.WriteLine("#endif")
        $writer.WriteLine()
    }
}

# Record the name of each command.
$names = @{}
$dte.Commands | Where-Object { $_.Name } | ForEach-Object {
    # The command's Guid property is a string. Parse and 
    # re-format it so that we can guarantee the format will
    # be the same when we get the GUID from the enum type below.
    $names["$([Guid]::Parse($_.Guid).ToString())|$($_.ID)"] = $_.Name
}

# Get the command details from the enums. Note that a command name 
# could be used for multiple command IDs, so we'll track which command
# names we've seen and only use the first one for any duplicates.
$commands = @()
$usedCommands = New-Object -TypeName "System.Collections.Generic.HashSet[string]"

foreach ($set in $COMMAND_SETS) {
    $enum = [Microsoft.VisualStudio.VSConstants].GetMember($set.Name)[0]
    $guid = $enum.GUID.ToString()

    foreach ($value in [Enum]::GetValues($enum)) {
        $name = $names["$guid|$([int]$value)"]

        if ($name -and $usedCommands.Add($name)) {
            $commands += @{
                Name           = $name
                MinimumVersion = $set.Introduced
                # Some enum members were added in later versions. For example, an enum member in a command set
                # that is available from v15 may only be defined in the v16 assembly, which means we can't use
                # the enum values when defining the commands. Use the raw value instead, but include the enum 
                # member name in a command so that you can see what it is meant to be using.
                Code           = @(
                    "        /// <summary>$($name)<br/><c>VSConstants.$($enum.Name).$($value.ToString())`</c></summary>",
                    "        public static CommandID $($name.Replace(".", "_")) => new CommandID(VSConstants.CMDSETID.$($set.Guid), $([int]$value));"
                )
            }
        }
    }
}

$fileName = Join-Path -Path $PSScriptRoot -ChildPath "../src/toolkit/Community.VisualStudio.Toolkit.Shared/Commands/KnownCommands.cs"
$writer = New-Object -TypeName "System.IO.StreamWriter" -ArgumentList $fileName

try {
    $writer.WriteLine("// <auto-generated/>")
    $writer.WriteLine()
    $writer.WriteLine("using System.ComponentModel.Design;")
    $writer.WriteLine("using Microsoft.VisualStudio;")
    $writer.WriteLine()
    $writer.WriteLine("namespace Community.VisualStudio.Toolkit")
    $writer.WriteLine("{")
    $writer.WriteLine("    /// <summary>Defines the command IDs for known commands.</summary>")
    $writer.WriteLine("    public static class KnownCommands")
    $writer.WriteLine("    {")

    foreach ($version in @($MINIMUM_VERSION..$MAXIMUM_VERSION)) {
        Write-Commands -Writer $writer -Commands $commands -Version $version
    }

    $writer.WriteLine("    }")
    $writer.WriteLine("}")

} finally {
    $writer.Dispose()
}

$dte.ItemOperations.OpenFile($fileName) | Out-Null
